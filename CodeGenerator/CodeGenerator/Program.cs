using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;

namespace CodeGenerator
{
	internal class Program
	{
		private static IEnumerable<string> Generate()
		{
			yield return "//------------------------------------------------------------------------------";
			yield return "// <auto-generated>";
			yield return "//     이 코드는 도구를 사용하여 생성되었습니다.";
			StringBuilder sb = new StringBuilder();
			sb.Append("//    ");
			foreach (string value in Environment.GetCommandLineArgs())
			{
				sb.Append(" ");
				sb.Append(value);
			}
			yield return sb.ToString();
			yield return "//";
			yield return "// </auto-generated>";
			yield return "//------------------------------------------------------------------------------";
			yield return "#include <Global/TypeInfo.h>";
			yield return "";
			Dictionary<Guid, object> set = new Dictionary<Guid, object>();
			string fileName = Path.GetFullPath("..\\..\\..\\..\\en-eu-x-gm\\Bin\\ServiceCore.dll");
			Console.WriteLine("dll Path = " + fileName);
			foreach (Type type in Assembly.LoadFrom(fileName).GetTypes())
			{
				if (!(type.GetInterface("ServiceCore.EndPointNetwork.IMessage") == null) || !(type.GetInterface("ServiceCore.EndPointNetwork.IP2PMessage") == null))
				{
					yield return string.Format("{1} {0};", type.Name, type.IsValueType ? (type.IsEnum ? "enum" : "struct") : "class");
					yield return string.Format("CORE_GUID_ATTRIBUTE({0}, 0x{1:X8}, 0x{2:X4}, 0x{3:X4}, 0x{4:X2}, 0x{5:X2}, 0x{6:X2}, 0x{7:X2}, 0x{8:X2}, 0x{9:X2}, 0x{10:X2}, 0x{11:X2});", new object[]
					{
						type.Name,
						typeof(Guid).GetField("_a", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_b", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_c", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_d", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_e", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_f", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_g", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_h", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_i", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_j", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID),
						typeof(Guid).GetField("_k", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(type.GUID)
					});
					set.Add(type.GUID, null);
				}
			}
			yield break;
		}

		private static bool UpToDate(string fileName)
		{
			bool result;
			using (StreamReader streamReader = new StreamReader(fileName))
			{
				foreach (string b in Program.Generate())
				{
					if (streamReader.EndOfStream)
					{
						return true;
					}
					string a = streamReader.ReadLine();
					if (a != b)
					{
						return true;
					}
				}
				result = !streamReader.EndOfStream;
			}
			return result;
		}

		private static void Write(string fileName)
		{
			FileInfo fileInfo = new FileInfo(fileName);
			fileInfo.IsReadOnly = false;
			using (StreamWriter streamWriter = new StreamWriter(fileName))
			{
				int num = 0;
				foreach (string text in Program.Generate())
				{
					if (text.StartsWith("CORE_GUID_ATTRIBUTE(") && text.EndsWith(");"))
					{
						num++;
					}
					streamWriter.WriteLine(text);
				}
				Console.WriteLine("Totally exported {0} GUID(s).", num);
			}
		}

		private static void Main(string[] args)
		{
			try
			{
				string fullPath = Path.GetFullPath("..\\..\\..\\HeroesCode\\Message.cpp");
				Console.WriteLine("cpp Path = " + Path.GetFullPath(fullPath));
				if (Program.UpToDate(fullPath) && Program.UpToDate(fullPath))
				{
					Program.Write(fullPath);
				}
			}
			catch (Exception value)
			{
				Console.WriteLine(value);
			}
		}
	}
}
